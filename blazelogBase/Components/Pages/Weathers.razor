@inject LayoutStateModel GlobalState
@inject ISender Commander
@rendermode InteractiveServer
@{

}

<p>This is a Weather Forecast Page</p>
@if (forecastDtos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="max-height: 200px; overflow: auto;">
        <InfiniteScroll ObserverTargetId="itemtargetid" ObservableTargetReached="(e) => FetchForecasts()">
            <ul>
                @foreach (var forecast in forecastDtos)
                {
                    <li class="list-group-item"> @forecast.Date: @forecast.TemperatureC-@forecast.TemperatureF (@forecast.Summary)</li>
                }
                <li class="list-group-item" id="itemtargetid"></li>
            </ul>


        </InfiniteScroll>
    </div>
}


@code {
    [Parameter]
    public int Total { get; set; }

    [Parameter]
    public int Size { get; set; }

    [Parameter]
    public int Start { get; set; } = 1;
    private bool Stop { get; set; }= false;

    private List<WeatherForecastDto> forecastDtos=new List<WeatherForecastDto>();

    protected override async Task OnInitializedAsync()
    {
        await FetchForecasts();
    }

    private async Task FetchForecasts()
    {

        forecastDtos.AddRange(await Commander.Send(new GetWeatherForecastsQuery(Total,Start, Size)));

        if(Start< Total)
        {
            Start += Size;

            if (Start > Total)
            {
                Start = Start - Size;
                Size = Total - Start;
            }

            

        }
        else
        {
            Stop = true;
        }

        
    }

    
}
